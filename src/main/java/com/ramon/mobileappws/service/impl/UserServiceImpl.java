package com.ramon.mobileappws.service.impl;

import com.ramon.mobileappws.exceptions.UserServiceException;
import com.ramon.mobileappws.io.entity.UserEntity;
import com.ramon.mobileappws.io.repository.UserRepository;
import com.ramon.mobileappws.service.UserService;
import com.ramon.mobileappws.shared.Utils;
import com.ramon.mobileappws.shared.dto.UserDto;
import com.ramon.mobileappws.ui.model.response.ErrorMessages;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.ArrayList;

@Service
public class UserServiceImpl implements UserService {

    private final UserRepository userRepository;
    private final Utils utils;
    private final BCryptPasswordEncoder bCryptPasswordEncoder;

    @Autowired
    public UserServiceImpl(UserRepository userRepository, Utils utils, BCryptPasswordEncoder bCryptPasswordEncoder) {
        this.userRepository = userRepository;
        this.utils = utils;
        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
    }

    @Override
    public UserDto getUser(String userId) {
        UserDto returnValue = new UserDto();

        UserEntity userEntity = userRepository.findByUserId(userId);
        if (userEntity == null) throw new UsernameNotFoundException("User with ID: " + userId + " not found.");

        BeanUtils.copyProperties(userEntity, returnValue);

        return returnValue;
    }

    @Override
    public UserDto createUser(UserDto userDto) {
        // Checks if Email already used
        if (userRepository.findByEmail(userDto.getEmail()) != null) throw new UserServiceException(ErrorMessages.RECORD_ALREADY_EXISTS.getErrorMessage());

        // basic properties being mapped to user entity
        UserEntity userEntity = new UserEntity();
        BeanUtils.copyProperties(userDto, userEntity);

        //set public userId generated by Utils class, set encrypted password with the help of BCryptPasswordEncoder
        String publicUserId = utils.generateUserId(30);
        String encryptedPassword = bCryptPasswordEncoder.encode(userDto.getPassword());
        userEntity.setUserId(publicUserId);
        userEntity.setEncryptedPassword(encryptedPassword);


        // Storing user in db with updated properties and returning a dto with new properties
        // to be passed onto controller
        UserEntity storedUserDetails = userRepository.save(userEntity);

        UserDto returnValue = new UserDto();
        BeanUtils.copyProperties(storedUserDetails, returnValue);

        return returnValue;
    }

    @Override
    public UserDto updateUser(String userId, UserDto userDto) {
        UserDto returnValue = new UserDto();

        UserEntity userEntity = userRepository.findByUserId(userId);
        if (userEntity == null) throw new UserServiceException(ErrorMessages.NO_RECORD_FOUND.getErrorMessage());
        // Updating details
        userEntity.setFirstName(userDto.getFirstName());
        userEntity.setLastName(userDto.getLastName());

        // Saving details
        UserEntity updatedUserDetails = userRepository.save(userEntity);

        // Returning DTO with updated details
        BeanUtils.copyProperties(updatedUserDetails, returnValue);

        return returnValue;
    }

    @Override
    public void deleteUser(String userId) {
        // Checking if user exists in db
        UserEntity userEntity = userRepository.findByUserId(userId);
        if (userEntity == null) throw new UserServiceException(ErrorMessages.NO_RECORD_FOUND.getErrorMessage());

        // Deleting user
        userRepository.delete(userEntity);

    }

    // Methods Used for security below //
    //////////////////////////////////////////

    @Override
    public UserDto getUserByEmail(String email) {
        // Checking if user exists
        UserEntity userEntity = userRepository.findByEmail(email);
        if (userEntity == null) throw new UsernameNotFoundException(email);

        // mapping user entity to user dto
        UserDto returnValue = new UserDto();
        BeanUtils.copyProperties(userEntity, returnValue);

        return returnValue;

    }

    // Method below comes directly from spring security UserDetails Class

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        UserEntity userEntity = userRepository.findByEmail(email);

        // Checks if user entity is null when finding by email (username)
        if (userEntity == null) throw new UsernameNotFoundException(email);

        // Need to return a new User (imported from spring security)
        // 3rd argument takes a list of granted authorities
        return new User(userEntity.getEmail(), userEntity.getEncryptedPassword(), new ArrayList<>());
    }
}
